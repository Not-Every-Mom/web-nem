// This file is automatically generated. Do not edit it directly.
// Modified to avoid creating a realtime connection in local dev that can hang the browser.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const RAW_SUPABASE_URL = (import.meta.env.NEXT_PUBLIC_SUPABASE_URL as string) || "https://zerkltkbjbttvkvobome.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = (import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string) || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InplcmtsdGtiamJ0dHZrdm9ib21lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MzEzMTIsImV4cCI6MjA3MDEwNzMxMn0.oYfjsbLh4opXM50ynUBQw9Z6SVdDsZmnlxkC2A_Ib1Y";

// If you're running a local Supabase dev proxy (eg. 127.0.0.1:54321) that is not available,
// creating the real Supabase client will attempt to open persistent realtime/websocket
// connections and can cause repeated reconnect attempts that hang or crash the browser.
// To avoid that during local development, export a safe no-op stub instead of creating
// the real client when the configured URL looks local and NODE_ENV=development.
//
// The app imports `supabase` across the codebase, so we keep the export but provide a
// minimal stub implementation in dev that won't open network connections. In production
// the real client will be created normally.
//
// NOTE: We export as `any` to avoid tight typing issues across the codebase for this stub.
// If you want full typing, replace the stub with a properly typed mock matching the
// subset of the Supabase API your app uses.

function isLocalDev(url: string) {
  if (!url) return false;
  const u = url.toLowerCase();
  return (
    u.startsWith('http://127.') ||
    u.startsWith('http://localhost') ||
    u.startsWith('http://0.0.0.0') ||
    u.startsWith('http://[::1') ||
    u.includes(':54321') // common supabase local port
  );
}

let supabaseClient: any = null;

if (import.meta.env && (import.meta.env.MODE === 'development' || (import.meta.env.NODE_ENV === 'development'))) {
  // Running in dev mode: if URL looks local, avoid creating the real client.
  if (isLocalDev(RAW_SUPABASE_URL)) {
    // Minimal stub: implement the small API surface used in the app.
    // Add more methods here if the app relies on them.
    supabaseClient = {
      // from().select() pattern
      from: (table: string) => ({
        select: async (..._args: any[]) => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
        insert: async (..._args: any[]) => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
        update: async (..._args: any[]) => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
        delete: async (..._args: any[]) => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
      }),
      // auth helpers
      auth: {
        getUser: async () => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
        onAuthStateChange: (_cb: any) => ({ data: null }),
      },
      // realtime/channel stubs
      channel: () => ({
        subscribe: async () => ({ status: 'SUBSCRIBED' }),
        unsubscribe: async () => ({ status: 'UNSUBSCRIBED' }),
      }),
      // storage stub
      storage: {
        from: () => ({
          upload: async () => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
          download: async () => ({ data: null, error: { message: 'Supabase client stub active in dev' } }),
        }),
      },
    };
  } else {
    // Not a local URL in dev â€” create the real client but avoid enabling realtime by default.
    // We do not pass a `realtime` custom option here because different @supabase versions may
    // have different Realtime options shapes; letting createClient use defaults is safest.
    supabaseClient = createClient<Database>(RAW_SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      },
      // Do not add a realtime option here to avoid type mismatches across versions.
      // If you need realtime in production, create the client with the correct realtime options there
      // or set the production URL via environment variables.
    });
  }
} else {
  // Production / non-dev: create the real client.
  supabaseClient = createClient<Database>(RAW_SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
  });
}

export const supabase: any = supabaseClient;
